{{< include ../../../../Common/QuartoBookHelpers/QuartoBookHelpers.qmd >}}

# Mathematische Grundlagen der 3-Pahsen-Drehstromtechnik

```{python}
#| code-fold: true
U_12 = MySymbol('\\underline{U}_{12}',description = 'Spannung zwischen Phase L1 und L2')
U_23 = MySymbol('\\underline{U}_{23}',description = 'Spannung zwischen Phase L2 und L3')
U_31 = MySymbol('\\underline{U}_{31}',description = 'Spannung zwischen Phase L3 und L1')
U_1N = MySymbol('\\underline{U}_{1N}',description = 'Spannung zwischen Phase L1 und N')
U_2N = MySymbol('\\underline{U}_{2N}',description = 'Spannung zwischen Phase L2 und N')
U_3N = MySymbol('\\underline{U}_{3N}',description = 'Spannung zwischen Phase L3 und N')
U_ss = MySymbol('U_ss',description = 'Amplitude der Spannung')


#R_ohm_eq=Eq(R_ohm,U_ohm/I_ohm)

#display(Markdown(f'$$\n{latex(R_ohm_eq)}\n$${{#eq-Ohm_eq}}'))

#QBookHelpers.print_description(R_ohm_eq.free_symbols)

QBookHelpers.print_description([U_12,U_23,U_31,U_1N,U_2N,U_3N])

U_1Neq = Eq(U_1N,U_ss*exp(I*0))
QBookHelpers.print_equation(U_1Neq)
U_2Neq = Eq(U_2N,U_ss*exp(I*2/3*pi))
QBookHelpers.print_equation(U_2Neq)
U_3Neq = Eq(U_3N,U_ss*exp(-I*2/3*pi))
QBookHelpers.print_equation(U_3Neq)

U_12eq = Eq(U_12,U_1N-U_2N)
QBookHelpers.print_equation(U_12eq)
U_12eq = U_12eq.subs([(U_1N,U_1Neq.rhs),(U_2N,U_2Neq.rhs),(U_3N,U_3Neq.rhs)])
QBookHelpers.print_equation(U_12eq)

U_23eq = Eq(U_23,U_2N-U_3N)
QBookHelpers.print_equation(U_23eq)
U_23eq = U_23eq.subs([(U_1N,U_1Neq.rhs),(U_2N,U_2Neq.rhs),(U_3N,U_3Neq.rhs)])
QBookHelpers.print_equation(U_23eq)

U_31eq = Eq(U_31,U_3N-U_1N)
QBookHelpers.print_equation(U_31eq)
U_31eq = U_31eq.subs([(U_1N,U_1Neq.rhs),(U_2N,U_2Neq.rhs),(U_3N,U_3Neq.rhs)])
QBookHelpers.print_equation(U_31eq)


U_ss.value = 240*sqrt(2)

# Creating plot
plt.figure(figsize=(5, 5))
plt.text(0,0,'N')

# U_1N vectors
# Vector origin location
X1 = [0]
Y1 = [0]
U1 = float(im(U_1Neq.rhs.subs(U_ss,U_ss.value)))
V1 = float(re(U_1Neq.rhs.subs(U_ss,U_ss.value)).evalf())
label = repr('$' + str(U_1N).replace(r'\underline', '')) + '$'
plt.quiver(X1, Y1, U1, V1, color='b',angles='xy', scale_units='xy', scale=1, label= label)
plt.text(U1,V1,'L1')

# U_2N vectors
# Vector origin location
X2 = [0]
Y2 = [0]
U2 = float(im(U_2Neq.rhs.subs(U_ss,U_ss.value)))
V2 = float(re(U_2Neq.rhs.subs(U_ss,U_ss.value)).evalf())
label = repr('$' + str(U_2N).replace(r'\underline', '')) + '$'
plt.quiver(X2, Y2, U2, V2, color='k',angles='xy', scale_units='xy', scale=1, label=label)
plt.text(U2,V2,'L2')

# U_3N vectors
# Vector origin location
X3 = [0]
Y3 = [0]
U3 = float(im(U_3Neq.rhs.subs(U_ss,U_ss.value)))
V3 = float(re(U_3Neq.rhs.subs(U_ss,U_ss.value)).evalf())
label = repr('$' + str(U_3N).replace(r'\underline', '')) + '$'
plt.quiver(X3, Y3, U3, V3, color='m',angles='xy', scale_units='xy', scale=1, label=label)
plt.text(U3*1.1,V3*1.1,'L3')

#U_12 Vector
X12 = U1
Y12 = V1
U12 = U2-U1
V12 = V2-V1
label = repr('$' + str(U_12).replace(r'\underline', '')) + '$'
plt.quiver(X12, Y12, U12, V12, color='r',angles='xy', scale_units='xy', scale=1, label=label)

#U_23 Vector
X23 = U2
Y23 = V2
U23 = U3-U2
V23 = V3-V2
label = repr('$' + str(U_23).replace(r'\underline', '')) + '$'
plt.quiver(X23, Y23, U23, V23, color='g',angles='xy', scale_units='xy', scale=1, label=label)

#U_31 Vector
X31 = U3
Y31 = V3
U31 = U1-U3
V31 = V1-V3
label = repr('$' + str(U_31).replace(r'\underline', '')) + '$'
plt.quiver(X31, Y31, U31, V31, color='y',angles='xy', scale_units='xy', scale=1, label=label)

  
# x-lim and y-lim
plt.xlim(-400, 400)
plt.ylim(-400, 400)
  
plt.title('Spannungen im 3-Pahsen System')
plt.grid()
plt.legend()
plt.show()

```

<div style="text-align: justify">

</div>